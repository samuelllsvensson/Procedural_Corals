#include "stdosl.h"
#include "node_noise.h"
#include "vector2.h"
#include "vector4.h"

#define vector3 point

float noise_musgrave_fBm(vector3 coord, float H, float lacunarity, float octaves)
{
  vector3 p = coord;
  float value = 0.0;
  float exp = 1.0;
  float pwHL = pow(lacunarity, -H);

  for (int i = 0; i < (int)octaves; i++) {
    value += safe_snoise(p) * exp;
    exp *= pwHL;
    p *= lacunarity;
  }

  float rmd = octaves - floor(octaves);
  if (rmd != 0.0) {
    value += rmd * safe_snoise(p) * exp;
  }

  return value;
}

/* The following offset functions generate random offsets to be added to texture
 * coordinates to act as a seed since the noise functions don't have seed values.
 * A seed value is needed for generating distortion textures and color outputs.
 * The offset's components are in the range [100, 200], not too high to cause
 * bad precision and not to small to be noticeable. We use float seed because
 * OSL only support float hashes.
 */

float random_float_offset(float seed)
{
  return 100.0 + noise("hash", seed) * 100.0;
}

vector2 random_vector2_offset(float seed)
{
  return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
                 100.0 + noise("hash", seed, 1.0) * 100.0);
}

vector3 random_vector3_offset(float seed)
{
  return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
                 100.0 + noise("hash", seed, 1.0) * 100.0,
                 100.0 + noise("hash", seed, 2.0) * 100.0);
}

vector4 random_vector4_offset(float seed)
{
  return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
                 100.0 + noise("hash", seed, 1.0) * 100.0,
                 100.0 + noise("hash", seed, 2.0) * 100.0,
                 100.0 + noise("hash", seed, 3.0) * 100.0);
}

shader MusgraveNoise(
    point Vector = P,
    float MusgraveScale = 10.0,
    float MusgraveDetail = 5.0,
    float MusgraveDimension = 2.0,
    float MusgraveLacunarity = 1.0,
    output float MusgraveFac = 0.0)
{

  // Define properties
  float dimension = max(MusgraveDimension, 
                        1e-5);
  float octaves = clamp(MusgraveDetail, 
                        0.0, 16.0);
  float lacunarity = max(MusgraveLacunarity, 
                        1e-5);

  vector3 s = Vector;
    
  vector3 p = s * MusgraveScale;
  MusgraveFac = noise_musgrave_fBm(p, dimension,
                        lacunarity, octaves);
}